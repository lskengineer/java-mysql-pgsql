---
name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-upload:
    runs-on: ubuntu-20.04

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "11"

      # Step 3: Build with Maven
      - name: Build with Maven
        run: mvn clean package

      # Step 4: Debug - List target files
      - name: Debug - List target files
        run: ls -la target

      # Step 5: Test JFrog CLI
      - name: Test JFrog CLI
        run: |
          curl -fL https://getcli.jfrog.io | sh
          ./jfrog config remove my-jfrog-server || true # Remove if it exists
          ./jfrog config add my-jfrog-server \
            --artifactory-url=${{ secrets.JFROG_URL }} \
            --user=${{ secrets.JFROG_USERNAME }} \
            --password=${{ secrets.JFROG_PASSWORD }}
          ./jfrog rt ping --server-id=my-jfrog-server

      # Step 6: Upload Artifact to JFrog
      - name: Upload Artifact to JFrog
        run: |
          ARTIFACT_NAME=$(ls target/*.jar)
          ./jfrog rt u "$ARTIFACT_NAME" "libs-release-local/java-mysql-pgsql/${ARTIFACT_NAME##*/}" \
            --server-id=my-jfrog-server

      # Step 7: Download Artifact from JFrog
      - name: Download Artifact from JFrog
        run: |
          curl -fL https://getcli.jfrog.io | sh
          ./jfrog config add my-jfrog-server \
            --artifactory-url=${{ secrets.JFROG_URL }} \
            --user=${{ secrets.JFROG_USERNAME }} \
            --password=${{ secrets.JFROG_PASSWORD }}
          ./jfrog rt dl "libs-release-local/java-mysql-pgsql/*.jar" ./artifact.jar --server-id=my-jfrog-server

      # Step 8: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t your-dockerhub-username/java-mysql-pgsql:latest --build-arg ARTIFACT=./artifact.jar .

      # Step 9: Login to DockerHub
      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Step 10: Push Docker Image to DockerHub
      - name: Push Docker Image
        run: docker push your-dockerhub-username/java-mysql-pgsql:latest

      # Step 11: Commit and Push Generated Files to GitHub
      - name: Commit and Push Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          git add .
          git commit -m "Automated update: Added generated files"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
