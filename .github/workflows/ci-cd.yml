---
name: CI/CD Pipeline with Conditional Builds

'on':
  push:
    branches:
      - main

jobs:
  conditional-build-and-docker:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Detect Changes in Application Code
      - name: Check for Application Code Changes
        id: code-check
        run: |
          if git diff --quiet HEAD^ HEAD ./src; then
            echo "changes-detected=false" >> $GITHUB_ENV
          else
            echo "changes-detected=true" >> $GITHUB_ENV
          fi

      # Step 3: Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "17"

      # Step 4: Conditional Maven Build
      - name: Build with Maven
        if: env.changes-detected == 'true'
        run: mvn clean package

      # Step 5: Conditional SonarCloud Analysis
      - name: SonarCloud Scan
        if: env.changes-detected == 'true'
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=java-mysql-pgsql \
            -Dsonar.organization=lskengineer \
            -Dsonar.branch.name=main \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # Step 6: Always Download Artifact from JFrog
      - name: Download Artifact from JFrog
        run: |
          curl -fL https://getcli.jfrog.io | sh
          ./jfrog config add my-jfrog-server \
            --artifactory-url=${{ secrets.JFROG_URL }} \
            --user=${{ secrets.JFROG_USERNAME }} \
            --password=${{ secrets.JFROG_PASSWORD }}
          ./jfrog rt dl \
            "libs-release-local/java-mysql-pgsql/*.jar" \
            ./artifact.jar --server-id=my-jfrog-server

      # Step 7: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t your-dockerhub-username/java-mysql-pgsql:latest \
            --build-arg ARTIFACT=./artifact.jar .

      # Step 8: Log in to DockerHub
      - name: Log in to DockerHub
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | \
          docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Step 9: Push Docker Image to DockerHub
      - name: Push Docker Image
        run: docker push your-dockerhub-username/java-mysql-pgsql:latest
